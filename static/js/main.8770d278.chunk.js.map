{"version":3,"sources":["Components/Chart/Chart.module.css","hoc/Aux/Aux.js","UI/Spinner/Spinner.js","Components/Chart/Chart.jsx","api/index.js","Components/Country/Country.jsx","Components/Footer/Footer.js","Components/Header/Header.js","App.js","index.js","App.module.css","Components/Country/Country.module.css","UI/Spinner/Spinner.module.css","Components/Footer/Footer.module.css","Components/Header/Dimianni.svg","Components/Header/Header.module.css"],"names":["module","exports","Aux","props","children","Spinner","className","styles","Chart","countryData","country","daily","arr","dailyArr","i","length","dailyData","push","charts","dailyChart","activeChart","totalChart","date","data","labels","map","Date","toDateString","datasets","confirmed","label","backgroundColor","fill","deaths","recovered","options","scales","xAxes","ticks","callback","tick","index","array","datalabels","display","active","borderColor","legend","color","chart","container","postmanURL","fetchCountryData","a","changeableURL","axios","get","numConfirmed","Confirmed","numRecovered","Recovered","numDeaths","Deaths","numActive","Active","modifiedData","console","log","name","message","Error","fetchCountries","Country","handleCountryChange","theme","useState","receivedCountries","setReceivedCountries","useEffect","fetchAPI","selectorClasses","selectorView","selectorViewDark","selector","htmlFor","countyLabelLight","countyLabelDark","id","defaultValue","onChange","e","target","value","join","sort","key","disclaimer","notificationLight","notificationDark","Footer","footer","role","alt","aria-label","href","Header","themeSwitcher","btnClasses","def","darkMode","light","dark","headerContainer","src","Logo","logo","onClick","App","state","fetchedData","setState","this","Applight","Appdark","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8770d278.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2bxln\",\"chart\":\"Chart_chart__1e-yh\"};","const Aux = (props) => props.children;\n\nexport default Aux;","import React from 'react';\nimport styles from './Spinner.module.css'\n\nconst Spinner = () => {\n    return ( \n        <div className={styles.Spinner}>Loading...</div>\n     );\n}\n \nexport default Spinner;","import React from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\nimport Aux from '../../hoc/Aux/Aux';\nimport Spinner from '../../UI/Spinner/Spinner'\n\n\nconst Chart = ({ countryData, country }) => {\n  \n    // Function which calculates the difference of occurrences between days\n    function daily(arr) {\n        let dailyArr = [];\n        for (var i = 1; i < arr.length; i++) {\n            let dailyData = arr[i] - arr[i - 1];\n            if (dailyData < 0) {\n                dailyData = 0\n            }\n            dailyArr.push(dailyData)\n        }\n        return dailyArr;\n    }\n\n    // Before data is loaded \n    let charts = <Spinner />;\n    let dailyChart = null;\n    let activeChart = null;\n    let totalChart = null;\n\n    // When data IS LOADED\n    if (countryData.date) {\n\n        if (countryData.date.length === 0) {\n            return <div>Sorry...I was unable to get the data from {country} ;(</div>\n        }\n\n        dailyChart = (\n            <Aux>\n                <div className='chartTitle'>Daily Summary in {country ? country : 'Spain'}</div>\n                <Bar\n                    data={{\n                        labels: countryData.date.map(date => new Date(date).toDateString()),\n                        datasets: [{\n                            data: daily(countryData.confirmed).map(confirmed => confirmed),\n                            label: 'Confirmed',\n                            backgroundColor: '#24307B',\n                            fill: true\n                        }, {\n                            data: daily(countryData.deaths).map(deaths => deaths),\n                            label: 'Deaths',\n                            // borderColor: 'red',\n                            backgroundColor: '#B32222',\n                            fill: true\n                        }, {\n                            data: daily(countryData.recovered).map(recovered => recovered),\n                            label: 'Recovered',\n                            // borderColor: 'green',\n                            backgroundColor: '#1A8B28',\n                            fill: true\n                        }]\n                    }}\n                    options={{\n                        scales: {\n                            xAxes: [{\n                                ticks: {\n                                    callback: function (tick, index, array) {\n                                        return (index % 3) ? \"\" : tick;\n                                    }\n                                }\n                            }]\n                        },\n                        datalabels: { display: false }\n                    }}\n                />\n            </Aux>\n        )\n\n        activeChart = (\n            <Aux>\n                <div className='chartTitle'>Current Active Cases in {country ? country : 'Spain'}</div>\n                <Line\n                    data={{\n                        labels: countryData.date.map(date => new Date(date).toDateString()),\n                        datasets: [{\n                            data: countryData.active.map(active => active),\n                            label: 'Active',\n                            borderColor: 'purple',\n                            backgroundColor: 'rgba(21, 31, 48, 0.5)',\n                            fill: true\n                        }]\n                    }}\n                    options={{\n                        scales: {\n                            xAxes: [{\n                                ticks: {\n                                    callback: function (tick, index, array) {\n                                        return (index % 3) ? \"\" : tick;\n                                    }\n                                }\n                            }]\n                        },\n                        datalabels: { display: false }\n                    }}\n                />\n            </Aux>\n\n        )\n\n        totalChart = (\n            <Aux>\n                <div className='chartTitle'>Total stats in {country ? country : 'Spain'}</div>\n                <Bar\n                    data={{\n                        labels: ['Infected', 'Recovered', 'Deaths'],\n                        datasets: [{\n                            label: 'People',\n                            backgroundColor: ['#24307B', '#1A8B28', '#B32222'],\n                            data: [countryData.confirmed[countryData.confirmed.length - 1], countryData.recovered[countryData.recovered.length - 1], countryData.deaths[countryData.deaths.length - 1]]\n                        }]\n                    }}\n                    options={{\n                        legend: { display: false },\n                        datalabels: {\n                            display: true,\n                            color: '#fff'\n                        }\n                    }}\n                />\n            </Aux>\n        )\n\n        charts = (\n            <Aux>\n                <div className={styles.chart}>{activeChart}</div>\n                <div className={styles.chart}>{dailyChart}</div>\n                <div className={styles.chart}>{totalChart}</div>\n            </Aux>\n        )\n    }\n\n\n    return (\n        <div className={styles.container}>\n            {charts}\n        </div>\n    );\n}\n\nexport default Chart;","import axios from 'axios';\n\nconst postmanURL = 'https://api.covid19api.com';\n\n\n// Why use Axios and not built-in fetch?\n// Axios deals with JSON, we do not have to convert it to object; Article:\n// https://blog.logrocket.com/axios-or-fetch-api/\n\n// Async / Await:\n// https://medium.com/javascript-in-plain-english/async-await-javascript-5038668ec6eb\n// Alternative to classic Promise of fetch(api).then(res => res.json()).then(data => data).catch()\n\n// Promises in JS:\n// https://medium.com/javascript-in-plain-english/truly-understanding-promises-in-javascript-cb31ee487860\n\n//----------------------------------------------Fetching Country Data----------------------------------------------\n\nexport const fetchCountryData = async (country) => {\n\n    let changeableURL = `${postmanURL}/country/spain`\n\n    if (country) {\n        changeableURL = `${postmanURL}/country/${country}`\n    }\n\n    // Try...Catch - is a good way to handle errors; Especially if you do not have .catch in the Promise\n    // Try...Catch in JS:\n    // https://javascript.info/try-catch\n\n    try {\n        // Data is an array of objects\n        // Waiting for the data to be received and then storing it in 'data'\n        const { data } = await axios.get(changeableURL)\n\n        let confirmed = data.map(numConfirmed => {\n            return numConfirmed.Confirmed\n        })\n        let recovered = data.map(numRecovered => {\n            return numRecovered.Recovered\n        })\n        let deaths = data.map(numDeaths => {\n            return numDeaths.Deaths\n        })\n        let active = data.map(numActive => {\n            return numActive.Active\n        })\n        let date = data.map(date => {\n            return date.Date\n        })\n\n        // Object of arrays\n        const modifiedData = {\n            confirmed,\n            recovered,\n            deaths,\n            active,\n            date\n        }\n        console.log(modifiedData)\n\n        return modifiedData;\n\n        // OR SIMPLY\n\n        // return { confirmed, recovered, deaths, lastUpdate };\n\n    } catch (error) {\n        console.log(error.name);\n        console.log(error.message);\n        // Throwing Error (my own Error object)\n        return new Error(\"Couldn't fetch country data.\")\n    }\n}\n\n\n//----------------------------------------------Getting list of Countries----------------------------------------------\n\nexport const fetchCountries = async () => {\n\n    try {\n\n        const { data } = await axios.get(`${postmanURL}/countries`)\n\n        return data.map((country) => {\n            return country.Country\n        })\n\n    } catch (error) {\n        console.log(error)\n        return new Error(\"Couldn't fetch countries.\")\n    }\n}","import React, { useState, useEffect } from 'react';\nimport styles from './Country.module.css';\n\n\n// Receiving list of countries\nimport { fetchCountries } from '../../api';\n\n\n\nconst Country = ({ handleCountryChange, theme }) => {\n\n    // state = {\n    //     fetchedCountries:[]\n    // } Equals to:\n    const [receivedCountries, setReceivedCountries] = useState([])\n\n\n    // Instead of componentDidMount we can use:\n    useEffect(() => {\n\n        // Instead of setState call a function\n        const fetchAPI = async () => {\n            setReceivedCountries(await fetchCountries())\n        }\n        fetchAPI();\n        // Is going to change only when 'setReceivedCountries' change\n    }, [setReceivedCountries])\n\n\n    // Class Switcher\n    let selectorClasses = [`${styles.selectorView}`]\n\n    if (theme === 'dark'){\n        selectorClasses.push(`${styles.selectorViewDark}`)\n    } else {\n        selectorClasses = [`${styles.selectorView}`]\n    }\n\n\n    return (\n        <div className={styles.selector}>\n            <label htmlFor=\"countries\" className={theme === 'light' ? styles.countyLabelLight : styles.countyLabelDark}>Please select a country:</label>\n            <select id='countries' defaultValue='' onChange={(e) => handleCountryChange(e.target.value)} className={selectorClasses.join(' ')}>\n                <option value=\"Spain\" defaultValue>Spain</option>\n                {receivedCountries.sort().map((country) => <option key={country} value={country}>{country}</option>)}\n            </select>\n            <div className={styles.disclaimer}>All data is received from Postman API</div>\n            <div className={theme === 'light' ? styles.notificationLight : styles.notificationDark}>For a better view of the charts, please turn your device to landscape orientation.</div>\n        </div>\n    );\n}\n\nexport default Country;","import React from 'react';\nimport styles from './Footer.module.css'\n\n\nconst Footer = () => {\n    return ( \n        <footer className={styles.footer}>\n            <div>\n                Built with <span role=\"img\" alt=\"love\" aria-label=\"\">&#10084;&#65039;</span> \n            </div>\n            <div>\n                © 2020 by <a href=\"https://dimianni.github.io/\">Dimianni</a>.\n            </div>\n        </footer>\n     );\n}\n \nexport default Footer;","import React from 'react';\nimport styles from './Header.module.css';\nimport Logo from './Dimianni.svg';\n\n\nconst Header = ({ themeSwitcher, theme }) => {\n\n    // Class Switcher\n    let btnClasses = [`${styles.def}`]\n\n    if (theme === 'dark') {\n        btnClasses.push(`${styles.darkMode}`)\n    } else {\n        btnClasses = [`${styles.def}`]\n    }\n\n\n    \n    return (\n        <div className={theme === 'light' ? styles.light : styles.dark}>\n            <div className={styles.headerContainer}>\n                <img alt=\"dimianni\" src={Logo} className={styles.logo}></img>\n\n                {/* Callback functions in React: */}\n                {/* https://medium.com/@thejasonfile/callback-functions-in-react-e822ebede766 */}\n\n                {/* Passing back info to the parent component */}\n                <button onClick={() => themeSwitcher()} className={btnClasses.join(' ')}>Mode: \n                    {theme === 'light' ? <ion-icon name=\"sunny\"></ion-icon> : <ion-icon name=\"moon\"></ion-icon>}\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport styles from './App.module.css';\n\n// Destructuring from index.js in Components\nimport { Header, Footer, Chart, Country } from './Components';\n\n// Receiving country data\nimport { fetchCountryData } from './api';\n\n\nclass App extends Component {\n\n  state = {\n    data: {},\n    country: '',\n    theme: 'light'\n  }\n\n  async componentDidMount() {\n\n    const fetchedData = await fetchCountryData();\n\n    this.setState({ data: fetchedData })\n    \n  }\n\n  // Changing state for a specific country\n  handleCountryChange = async (country) => {\n\n    //fetching the data\n    const fetchedData = await fetchCountryData(country)\n\n    // setting the state\n    this.setState({\n      data: fetchedData,\n      country: country\n    })\n  }\n\n  themeSwitcher = () => {\n    if (this.state.theme === 'light'){\n      this.setState({theme: 'dark'})\n    } else {\n      this.setState({ theme: 'light' })\n    }\n  }\n\n  render() {\n\n    // Destructuring state\n    const { data, country, theme } = this.state;\n\n    return (\n      <div className={theme === 'light' ? styles.Applight : styles.Appdark}>\n        <Header themeSwitcher={this.themeSwitcher} theme={theme}/>\n        <div className={styles.container}>\n          <Country handleCountryChange={this.handleCountryChange} theme={theme} />\n          <Chart countryData={data} country={country} />\n        </div>\n         <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"Applight\":\"App_Applight__3I4JD\",\"Appdark\":\"App_Appdark__2YqCr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"Country_selector__122VX\",\"disclaimer\":\"Country_disclaimer__2-4Rr\",\"countyLabelLight\":\"Country_countyLabelLight__2Fd7l\",\"countyLabelDark\":\"Country_countyLabelDark__2OZhr\",\"selectorView\":\"Country_selectorView__39CYo\",\"selectorViewDark\":\"Country_selectorViewDark__M06jh\",\"notificationLight\":\"Country_notificationLight__1P_7N\",\"notificationDark\":\"Country_notificationDark__3pLEl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__2AEm6\",\"load8\":\"Spinner_load8__swVB7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3kRR3\"};","module.exports = __webpack_public_path__ + \"static/media/Dimianni.aac117dc.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__1P9Gl\",\"logo\":\"Header_logo__ffv_d\",\"dark\":\"Header_dark__aLeXN\",\"light\":\"Header_light__2W2fc\",\"def\":\"Header_def__3HbUm\",\"darkMode\":\"Header_darkMode__uCNJQ\"};"],"sourceRoot":""}